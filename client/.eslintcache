[{"C:\\Users\\clair\\dev\\year3\\software-engineering\\github-access\\client\\src\\App.js":"1","C:\\Users\\clair\\dev\\year3\\software-engineering\\github-access\\client\\src\\index.js":"2","C:\\Users\\clair\\dev\\year3\\software-engineering\\github-datavis\\client\\src\\App.js":"3","C:\\Users\\clair\\dev\\year3\\software-engineering\\github-datavis\\client\\src\\index.js":"4"},{"size":4873,"mtime":1608324533443,"results":"5","hashOfConfig":"6"},{"size":199,"mtime":1606851816815,"results":"7","hashOfConfig":"6"},{"size":10102,"mtime":1609102277806,"results":"8","hashOfConfig":"9"},{"size":210,"mtime":1609088190525,"results":"10","hashOfConfig":"9"},{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11an0sc",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"1hhzxma",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\clair\\dev\\year3\\software-engineering\\github-access\\client\\src\\App.js",[],"C:\\Users\\clair\\dev\\year3\\software-engineering\\github-access\\client\\src\\index.js",[],"C:\\Users\\clair\\dev\\year3\\software-engineering\\github-datavis\\client\\src\\App.js",["20","21","22"],"import axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { Container, Row, Col, Button, Form, Table } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [debug, setDebug] = useState(true);\r\n  const [serverResponses, setServerResponses] = useState([]);\r\n\r\n  const [username, setUsername] = useState(\"\");\r\n  const [repos, setRepos] = useState([]);\r\n\r\n  // just the info we need for the sidebar\r\n  function RepoConcise(name, url) {\r\n    this.name = name;\r\n    this.url = url;\r\n  }\r\n\r\n  const hitBackend = () => {\r\n    axios.get(\"/test\").then((response) => {\r\n      console.log(response.data);\r\n      setServerResponses((serverResponses) => [\r\n        ...serverResponses,\r\n        response.data,\r\n      ]);\r\n    });\r\n  };\r\n\r\n  const getReposForUsername = () => {\r\n    if (username) {\r\n      axios\r\n        .get(`/user/${username}/repo`)\r\n        .then((res) => {\r\n          console.log(res.data);\r\n          if (Array.isArray(res.data)) {\r\n            const repos = res.data;\r\n            //console.log(\"WHOPPEE!!\");\r\n            repos.map((repo, index, arr) => {\r\n              arr[index] = new RepoConcise(repo.name, repo.url);\r\n            });\r\n            console.log(repos);\r\n\r\n            setRepos(repos);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n    }\r\n  };\r\n\r\n  const submitUserRequest = () => {\r\n    if (username) {\r\n      axios\r\n        .get(`/user/${username}`)\r\n        .then((res) => {\r\n          console.log(res);\r\n          if (res.data.items) {\r\n            setServerResponses((serverResponses) => [\r\n              ...serverResponses,\r\n              res.data.items[0],\r\n            ]);\r\n          } else {\r\n            setServerResponses((serverResponses) => [\r\n              ...serverResponses,\r\n              res.data,\r\n            ]);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Container fluid>\r\n        <Row>\r\n          {/* sidebar */}\r\n          <Col xs={2} className=\"App__Sidebar\">\r\n            {debug && (\r\n              <Button variant=\"secondary\" onClick={hitBackend}>\r\n                Test Backend\r\n              </Button>\r\n            )}\r\n            <Form>\r\n              <Form.Group controlId=\"FormUsername\">\r\n                <Form.Label>Username:</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"GitHub Username\"\r\n                  value={username}\r\n                  onChange={(e) => setUsername(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n            </Form>\r\n            <Button\r\n              variant=\"primary\"\r\n              className=\"btn-block\"\r\n              onClick={getReposForUsername}\r\n            >\r\n              Test\r\n            </Button>\r\n\r\n            {debug && <p>Username: {username}</p>}\r\n\r\n            {repos && (\r\n              <Container fluid className=\"App__Sidebar__Repos\">\r\n                <Table striped bordered hover>\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Select a Repo:</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {repos.map((repo, index) => {\r\n                      return (\r\n                        <tr key={index}>\r\n                          <td>{repo.name}</td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </Table>\r\n              </Container>\r\n            )}\r\n          </Col>\r\n\r\n          <Col xs={10} className=\"App__MainContent\">\r\n            {serverResponses.map((response, index) => {\r\n              return (\r\n                <div key={index}>\r\n                  <hr />\r\n                  <p>\r\n                    <b>R{index + 1}</b>\r\n                  </p>\r\n                  {typeof response === \"object\" ? (\r\n                    <div>\r\n                      <pre>{JSON.stringify(response, null, 2)}</pre>\r\n                    </div>\r\n                  ) : (\r\n                    <p\r\n                      id={index}\r\n                      style={{\r\n                        whiteSpace: \"pre-wrap\",\r\n                      }}\r\n                    >\r\n                      {response}\r\n                    </p>\r\n                  )}\r\n                </div>\r\n              );\r\n            })}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\n// function App() {\r\n//   const [serverResponses, setServerResponses] = useState([]);\r\n//   const [username, setUsername] = useState(\"\");\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [noUsernameError, setNoUsernameError] = useState(false);\r\n\r\n//   const hitBackend = () => {\r\n//     setLoading(true);\r\n//     axios.get(\"/test\").then((response) => {\r\n//       setLoading(false);\r\n\r\n//       console.log(response.data);\r\n//       setServerResponses((serverResponses) => [\r\n//         ...serverResponses,\r\n//         response.data,\r\n//       ]);\r\n//     });\r\n//   };\r\n\r\n//   const clearResponses = () => {\r\n//     setServerResponses((serverResponses) => []);\r\n//   };\r\n\r\n//   const submitUserRequest = () => {\r\n//     if (username) {\r\n//       setLoading(true);\r\n//       setNoUsernameError(false);\r\n\r\n//       axios\r\n//         .get(`/user/${username}`)\r\n//         .then((res) => {\r\n//           setLoading(false);\r\n//           console.log(res);\r\n//           if (res.data.items) {\r\n//             setServerResponses((serverResponses) => [\r\n//               ...serverResponses,\r\n//               res.data.items[0],\r\n//             ]);\r\n//           } else {\r\n//             setServerResponses((serverResponses) => [\r\n//               ...serverResponses,\r\n//               res.data,\r\n//             ]);\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.log(error);\r\n//         });\r\n//     } else {\r\n//       setNoUsernameError(true);\r\n//     }\r\n//   };\r\n\r\n//   const getUserRepos = () => {\r\n//     if (username) {\r\n//       setLoading(true);\r\n//       setNoUsernameError(false);\r\n\r\n//       axios\r\n//         .get(`/user/${username}/repo`)\r\n//         .then((res) => {\r\n//           setLoading(false);\r\n//           console.log(res.data);\r\n//           setServerResponses((serverResponses) => [\r\n//             ...serverResponses,\r\n//             res.data,\r\n//           ]);\r\n//         })\r\n//         .catch((error) => {\r\n//           console.log(error);\r\n//         });\r\n//     } else {\r\n//       setNoUsernameError(true);\r\n//     }\r\n//   };\r\n\r\n//   const getUserRepoSizes = () => {\r\n//     if (username) {\r\n//       setLoading(true);\r\n//       setNoUsernameError(false);\r\n\r\n//       axios\r\n//         .get(`/user/${username}/repo`)\r\n//         .then((response) => {\r\n//           setLoading(false);\r\n\r\n//           // response an array of objects for each repo\r\n//           let total_size_kbs = 0;\r\n\r\n//           let serverResponseItem = `Showing Repo Sizes for \"${username}\":\\n\\n`;\r\n\r\n//           let repos = response.data;\r\n//           console.log(repos);\r\n\r\n//           if (typeof repos === \"string\") { // repos is error string\r\n//             serverResponseItem = repos;\r\n//           } else {\r\n//             repos.forEach((repo) => {\r\n//               console.log(\r\n//                 `Repo name: ${repo.name}\\nRepo Size (KBs): ${repo.size}`\r\n//               );\r\n//               serverResponseItem += `\\nRepo name: ${repo.name}\\n\\tRepo Size (KBs): ${repo.size}`;\r\n//               total_size_kbs += repo.size;\r\n//             });\r\n\r\n//             console.log(\r\n//               `Total size of ${username}'s public repos: ${total_size_kbs} KBs`\r\n//             );\r\n//             serverResponseItem += `\\n\\t\\tTotal size of ${username}'s public repos: ${total_size_kbs} KBs`;\r\n//           }\r\n\r\n//           setServerResponses((serverResponses) => [\r\n//             ...serverResponses,\r\n//             serverResponseItem,\r\n//           ]);\r\n//         })\r\n//         .catch((error) => {\r\n//           console.log(error);\r\n//         });\r\n//     } else {\r\n//       noUsernameError(true);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <h1>Github API Access Demo</h1>\r\n//       <p>\r\n//         Enter a username and retrieve information on the user's public\r\n//         repositories and their sizes:\r\n//       </p>\r\n//       <button onClick={hitBackend} style={{ marginRight: \"20px\" }}>\r\n//         Contact Backend\r\n//       </button>\r\n//       <input\r\n//         type=\"text\"\r\n//         value={username}\r\n//         onChange={(e) => {\r\n//           setUsername(e.target.value);\r\n//         }}\r\n//       />\r\n//       <button onClick={submitUserRequest}>Render Raw User Info</button>\r\n//       <button onClick={getUserRepos}>Get Raw Repo Info</button>\r\n//       <button onClick={getUserRepoSizes}>Get Repo Sizes</button>\r\n//       <button onClick={clearResponses} style={{ marginLeft: \"20px\" }}>\r\n//         Clear Responses\r\n//       </button>\r\n\r\n//       {username ? <p>Looking for: {username}</p> : <></>}\r\n//       {loading ? <p>Loading ...</p> : <></>}\r\n//       {noUsernameError ? (\r\n//         <p style={{ color: \"red\" }}>Please enter a username</p>\r\n//       ) : (\r\n//         <></>\r\n//       )}\r\n\r\n//       {serverResponses.map((response, index) => {\r\n//         return (\r\n//           <div key={index}>\r\n//             <hr />\r\n//             <p><b>R{index+1}</b></p>\r\n//             {typeof response === \"object\" ? (\r\n//               <div>\r\n//                 <pre>{JSON.stringify(response, null, 2)}</pre>\r\n//               </div>\r\n//             ) : (\r\n//               <p\r\n//                 id={index}\r\n//                 style={{\r\n//                   whiteSpace: \"pre-wrap\",\r\n//                 }}\r\n//               >\r\n//                 {response}\r\n//               </p>\r\n//             )}\r\n//           </div>\r\n//         );\r\n//       })}\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\nexport default App;\r\n","C:\\Users\\clair\\dev\\year3\\software-engineering\\github-datavis\\client\\src\\index.js",[],{"ruleId":"23","severity":1,"message":"24","line":8,"column":17,"nodeType":"25","messageId":"26","endLine":8,"endColumn":25},{"ruleId":"27","severity":1,"message":"28","line":39,"column":42,"nodeType":"29","messageId":"30","endLine":39,"endColumn":44},{"ruleId":"23","severity":1,"message":"31","line":54,"column":9,"nodeType":"25","messageId":"26","endLine":54,"endColumn":26},"no-unused-vars","'setDebug' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'submitUserRequest' is assigned a value but never used."]