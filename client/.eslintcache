[{"C:\\Users\\clair\\dev\\year3\\software-engineering\\github-access\\client\\src\\App.js":"1","C:\\Users\\clair\\dev\\year3\\software-engineering\\github-access\\client\\src\\index.js":"2","C:\\Users\\clair\\dev\\year3\\software-engineering\\github-datavis\\client\\src\\App.js":"3","C:\\Users\\clair\\dev\\year3\\software-engineering\\github-datavis\\client\\src\\index.js":"4"},{"size":4873,"mtime":1608324533443,"results":"5","hashOfConfig":"6"},{"size":199,"mtime":1606851816815,"results":"7","hashOfConfig":"6"},{"size":13979,"mtime":1609180363641,"results":"8","hashOfConfig":"9"},{"size":210,"mtime":1609088190525,"results":"10","hashOfConfig":"9"},{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11an0sc",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"1hhzxma",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\clair\\dev\\year3\\software-engineering\\github-access\\client\\src\\App.js",[],"C:\\Users\\clair\\dev\\year3\\software-engineering\\github-access\\client\\src\\index.js",[],"C:\\Users\\clair\\dev\\year3\\software-engineering\\github-datavis\\client\\src\\App.js",["20"],"import axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Form,\r\n  Table,\r\n  Spinner,\r\n  Toast,\r\n  Fade,\r\n} from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [debug, setDebug] = useState(true);\r\n  const [serverResponses, setServerResponses] = useState([]);\r\n\r\n  // text field\r\n  const [username, setUsername] = useState(\"\");\r\n  // actually submitted\r\n  const [submittedUsername, setSubmittedUsername] = useState(\"\");\r\n  const [repos, setRepos] = useState([]);\r\n\r\n  const [sidebarLoading, setSidebarLoading] = useState(false);\r\n  const [noUsernameError, setNoUsernameError] = useState(false);\r\n  const [invalidUsernameError, setInvalidUsernameError] = useState(false);\r\n\r\n  // has a repo been selected from the list\r\n  const [repoActive, setRepoActive] = useState(false);\r\n  const [curRepo, setCurRepo] = useState(null);\r\n\r\n  // just the info we need from a Repo response for the sidebar\r\n  function RepoConcise(name, url) {\r\n    this.name = name;\r\n    this.url = url;\r\n  }\r\n\r\n  // const hitBackend = () => {\r\n  //   axios.get(\"/test\").then((response) => {\r\n  //     console.log(response.data);\r\n  //     setServerResponses((serverResponses) => [\r\n  //       ...serverResponses,\r\n  //       response.data,\r\n  //     ]);\r\n  //   });\r\n  // };\r\n\r\n  const getReposForUsername = () => {\r\n    if (username) {\r\n\r\n      // trigger the Spinner\r\n      setSidebarLoading(true);\r\n      // update the submitted username\r\n      setSubmittedUsername(username);\r\n      // get rid of the last request's repos\r\n      setRepos([]);\r\n      \r\n      // submit request to server\r\n      axios\r\n        .get(`/user/${username}/repo`)\r\n        .then((res) => {\r\n          setSidebarLoading(false);\r\n          console.log(res.data);\r\n\r\n          if (Array.isArray(res.data)) { //success\r\n            const repos = res.data;\r\n            repos.forEach((repo, index, arr) => {\r\n              arr[index] = new RepoConcise(repo.name, repo.url);\r\n            });\r\n            console.log(repos);\r\n\r\n            setRepos(repos);\r\n          } else {  // user dne\r\n            console.log(\"dne\");\r\n            setInvalidUsernameError(true);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          setSidebarLoading(false);\r\n        });\r\n    } else {\r\n      setNoUsernameError(true);\r\n    }\r\n  };\r\n\r\n  const submitUserRequest = () => {\r\n    if (username) {\r\n      axios\r\n        .get(`/user/${username}`)\r\n        .then((res) => {\r\n          console.log(res);\r\n          if (res.data.items) {\r\n            setServerResponses((serverResponses) => [\r\n              ...serverResponses,\r\n              res.data.items[0],\r\n            ]);\r\n          } else {\r\n            setServerResponses((serverResponses) => [\r\n              ...serverResponses,\r\n              res.data,\r\n            ]);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    } else {\r\n    }\r\n  };\r\n\r\n  const handleUsernameSubmission = (e) => {\r\n    getReposForUsername();\r\n  };\r\n\r\n  const handleRepoSelection = (repo) => {\r\n    console.log(`Name: ${repo.name}, Url: ${repo.url}`);\r\n    setCurRepo(repo);\r\n    setRepoActive(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Container \r\n      fluid\r\n      style={{\r\n        height: \"100vh\"\r\n      }}>\r\n        {/* No Username */}\r\n        {noUsernameError && (\r\n          <Toast\r\n            style={{\r\n              position: \"absolute\",\r\n              top: 0,\r\n              right: 0,\r\n              margin: \"10px\",\r\n            }}\r\n            className=\"text-muted\"\r\n            onClose={() => setNoUsernameError(false)}\r\n            show={noUsernameError}\r\n            delay={2000}\r\n            autohide\r\n          >\r\n            <Toast.Header className=\"bg-info text-white\">\r\n              <strong className=\"mr-auto\">No Username</strong>\r\n              <small>Now</small>\r\n            </Toast.Header>\r\n            <Toast.Body>Please enter a username before proceeding</Toast.Body>\r\n          </Toast>\r\n        )}\r\n\r\n        {/* Invalid Username */}\r\n        {invalidUsernameError &&\r\n          <Toast\r\n          style={{\r\n            position: \"absolute\",\r\n            top: 0,\r\n            right: 0,\r\n            margin: \"10px\",\r\n          }}\r\n          className=\"text-muted\"\r\n          onClose={() => setInvalidUsernameError(false)}\r\n          show={invalidUsernameError}\r\n          delay={2000}\r\n          autohide\r\n        >\r\n          <Toast.Header className=\"bg-danger text-white\">\r\n            <strong className=\"mr-auto\">Invalid Username</strong>\r\n            <small>Now</small>\r\n          </Toast.Header>\r\n          <Toast.Body>User <strong>{submittedUsername}</strong> doesn't seem to exist :(</Toast.Body>\r\n        </Toast>\r\n        }\r\n\r\n        <Row>\r\n          {/* sidebar */}\r\n          <Col \r\n            xs={2} \r\n            className=\"App__Sidebar\"\r\n            style={{\r\n              height: \"100vh\"\r\n            }}\r\n          >\r\n\r\n            {/* Heading */}\r\n            <h1 className=\"App__Header\">GitHub Access</h1>\r\n\r\n            {/* Username input */}\r\n            <Form\r\n              onSubmit={(e) => {\r\n                e.preventDefault();\r\n                handleUsernameSubmission(e);\r\n              }}\r\n            >\r\n              <Form.Group controlId=\"FormUsername\">\r\n                <Form.Label>Username:</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"GitHub Username\"\r\n                  value={username}\r\n                  onChange={(e) => setUsername(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n              {/* Submit Username */}\r\n              <Button variant=\"primary\" className=\"btn-block\" type=\"submit\">\r\n                Get Repos\r\n              </Button>\r\n            </Form>\r\n\r\n            <hr/>\r\n            {/* Loading spinner ... */}\r\n            {sidebarLoading && (\r\n              <Container className=\"App__Sidebar__Spinner\">\r\n                <Spinner animation=\"border\" role=\"status\" variant=\"info\">\r\n                  <span className=\"sr-only\">Loading...</span>\r\n                </Spinner>\r\n              </Container>\r\n            )}\r\n\r\n            {/* Table of repos */}\r\n            {repos.length > 0 && !sidebarLoading && (\r\n              \r\n              <Row className=\"App__Sidebar__Repos\">\r\n                <Table\r\n                  striped\r\n                  bordered\r\n                  className=\"App__Sidebar__Repos__ReposTable\"\r\n                >\r\n                  <thead>\r\n                    <tr\r\n                      style={{\r\n                        cursor: \"default\",\r\n                      }}\r\n                    >\r\n                      <th>Select a Repo:</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {repos.map((repo, index) => {\r\n                      return (\r\n                        <tr key={index} onClick={() => {handleRepoSelection(repo)}}>\r\n                          <td>{repo.name}</td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </Table>\r\n              </Row>\r\n            )}\r\n          </Col>\r\n\r\n          <Col xs={10} className=\"App__MainContent\">\r\n\r\n            {/* User hasn't selected a repo yet */}\r\n            {!repoActive &&\r\n              <Container className=\"App__MainContent__NoData\">\r\n                <h2>Select a repo to display data</h2>\r\n              </Container>\r\n            }\r\n            {/* {serverResponses.map((response, index) => {\r\n              return (\r\n                <div key={index}>\r\n                  <hr />\r\n                  <p>\r\n                    <b>R{index + 1}</b>\r\n                  </p>\r\n                  {typeof response === \"object\" ? (\r\n                    <div>\r\n                      <pre>{JSON.stringify(response, null, 2)}</pre>\r\n                    </div>\r\n                  ) : (\r\n                    <p\r\n                      id={index}\r\n                      style={{\r\n                        whiteSpace: \"pre-wrap\",\r\n                      }}\r\n                    >\r\n                      {response}\r\n                    </p>\r\n                  )}\r\n                </div>\r\n              );\r\n            })} */}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\n// function App() {\r\n//   const [serverResponses, setServerResponses] = useState([]);\r\n//   const [username, setUsername] = useState(\"\");\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [noUsernameError, setNoUsernameError] = useState(false);\r\n\r\n//   const hitBackend = () => {\r\n//     setLoading(true);\r\n//     axios.get(\"/test\").then((response) => {\r\n//       setLoading(false);\r\n\r\n//       console.log(response.data);\r\n//       setServerResponses((serverResponses) => [\r\n//         ...serverResponses,\r\n//         response.data,\r\n//       ]);\r\n//     });\r\n//   };\r\n\r\n//   const clearResponses = () => {\r\n//     setServerResponses((serverResponses) => []);\r\n//   };\r\n\r\n//   const submitUserRequest = () => {\r\n//     if (username) {\r\n//       setLoading(true);\r\n//       setNoUsernameError(false);\r\n\r\n//       axios\r\n//         .get(`/user/${username}`)\r\n//         .then((res) => {\r\n//           setLoading(false);\r\n//           console.log(res);\r\n//           if (res.data.items) {\r\n//             setServerResponses((serverResponses) => [\r\n//               ...serverResponses,\r\n//               res.data.items[0],\r\n//             ]);\r\n//           } else {\r\n//             setServerResponses((serverResponses) => [\r\n//               ...serverResponses,\r\n//               res.data,\r\n//             ]);\r\n//           }\r\n//         })\r\n//         .catch((error) => {\r\n//           console.log(error);\r\n//         });\r\n//     } else {\r\n//       setNoUsernameError(true);\r\n//     }\r\n//   };\r\n\r\n//   const getUserRepos = () => {\r\n//     if (username) {\r\n//       setLoading(true);\r\n//       setNoUsernameError(false);\r\n\r\n//       axios\r\n//         .get(`/user/${username}/repo`)\r\n//         .then((res) => {\r\n//           setLoading(false);\r\n//           console.log(res.data);\r\n//           setServerResponses((serverResponses) => [\r\n//             ...serverResponses,\r\n//             res.data,\r\n//           ]);\r\n//         })\r\n//         .catch((error) => {\r\n//           console.log(error);\r\n//         });\r\n//     } else {\r\n//       setNoUsernameError(true);\r\n//     }\r\n//   };\r\n\r\n//   const getUserRepoSizes = () => {\r\n//     if (username) {\r\n//       setLoading(true);\r\n//       setNoUsernameError(false);\r\n\r\n//       axios\r\n//         .get(`/user/${username}/repo`)\r\n//         .then((response) => {\r\n//           setLoading(false);\r\n\r\n//           // response an array of objects for each repo\r\n//           let total_size_kbs = 0;\r\n\r\n//           let serverResponseItem = `Showing Repo Sizes for \"${username}\":\\n\\n`;\r\n\r\n//           let repos = response.data;\r\n//           console.log(repos);\r\n\r\n//           if (typeof repos === \"string\") { // repos is error string\r\n//             serverResponseItem = repos;\r\n//           } else {\r\n//             repos.forEach((repo) => {\r\n//               console.log(\r\n//                 `Repo name: ${repo.name}\\nRepo Size (KBs): ${repo.size}`\r\n//               );\r\n//               serverResponseItem += `\\nRepo name: ${repo.name}\\n\\tRepo Size (KBs): ${repo.size}`;\r\n//               total_size_kbs += repo.size;\r\n//             });\r\n\r\n//             console.log(\r\n//               `Total size of ${username}'s public repos: ${total_size_kbs} KBs`\r\n//             );\r\n//             serverResponseItem += `\\n\\t\\tTotal size of ${username}'s public repos: ${total_size_kbs} KBs`;\r\n//           }\r\n\r\n//           setServerResponses((serverResponses) => [\r\n//             ...serverResponses,\r\n//             serverResponseItem,\r\n//           ]);\r\n//         })\r\n//         .catch((error) => {\r\n//           console.log(error);\r\n//         });\r\n//     } else {\r\n//       noUsernameError(true);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <h1>Github API Access Demo</h1>\r\n//       <p>\r\n//         Enter a username and retrieve information on the user's public\r\n//         repositories and their sizes:\r\n//       </p>\r\n//       <button onClick={hitBackend} style={{ marginRight: \"20px\" }}>\r\n//         Contact Backend\r\n//       </button>\r\n//       <input\r\n//         type=\"text\"\r\n//         value={username}\r\n//         onChange={(e) => {\r\n//           setUsername(e.target.value);\r\n//         }}\r\n//       />\r\n//       <button onClick={submitUserRequest}>Render Raw User Info</button>\r\n//       <button onClick={getUserRepos}>Get Raw Repo Info</button>\r\n//       <button onClick={getUserRepoSizes}>Get Repo Sizes</button>\r\n//       <button onClick={clearResponses} style={{ marginLeft: \"20px\" }}>\r\n//         Clear Responses\r\n//       </button>\r\n\r\n//       {username ? <p>Looking for: {username}</p> : <></>}\r\n//       {loading ? <p>Loading ...</p> : <></>}\r\n//       {noUsernameError ? (\r\n//         <p style={{ color: \"red\" }}>Please enter a username</p>\r\n//       ) : (\r\n//         <></>\r\n//       )}\r\n\r\n//       {serverResponses.map((response, index) => {\r\n//         return (\r\n//           <div key={index}>\r\n//             <hr />\r\n//             <p><b>R{index+1}</b></p>\r\n//             {typeof response === \"object\" ? (\r\n//               <div>\r\n//                 <pre>{JSON.stringify(response, null, 2)}</pre>\r\n//               </div>\r\n//             ) : (\r\n//               <p\r\n//                 id={index}\r\n//                 style={{\r\n//                   whiteSpace: \"pre-wrap\",\r\n//                 }}\r\n//               >\r\n//                 {response}\r\n//               </p>\r\n//             )}\r\n//           </div>\r\n//         );\r\n//       })}\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\nexport default App;\r\n","C:\\Users\\clair\\dev\\year3\\software-engineering\\github-datavis\\client\\src\\index.js",[],{"ruleId":null,"fatal":true,"severity":2,"message":"21","line":252,"column":15},"Parsing error: Expected corresponding JSX closing tag for <div>\n\n  250 |                   </tbody>\n  251 |                 </Table>\n> 252 |               </Row>\n      |               ^\n  253 |             )}\n  254 |           </Col>\n  255 |"]